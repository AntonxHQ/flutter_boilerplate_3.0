// Mocks generated by Mockito 5.4.2 from annotations
// in antonx_flutter_boilerplate_3/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:antonx_flutter_boilerplate_3/models/auth_models/login_body.dart'
    as _i17;
import 'package:antonx_flutter_boilerplate_3/models/auth_models/signup_body.dart'
    as _i16;
import 'package:antonx_flutter_boilerplate_3/models/user.dart' as _i15;
import 'package:antonx_flutter_boilerplate_3/responses/auth_response.dart'
    as _i6;
import 'package:antonx_flutter_boilerplate_3/responses/base_responses/base_response.dart'
    as _i5;
import 'package:antonx_flutter_boilerplate_3/responses/user_profile_response.dart'
    as _i4;
import 'package:antonx_flutter_boilerplate_3/services/api_service.dart' as _i13;
import 'package:antonx_flutter_boilerplate_3/services/authentication_service.dart'
    as _i14;
import 'package:antonx_flutter_boilerplate_3/services/config_service.dart'
    as _i24;
import 'package:antonx_flutter_boilerplate_3/services/database_service.dart'
    as _i18;
import 'package:antonx_flutter_boilerplate_3/services/date_time_service.dart'
    as _i19;
import 'package:antonx_flutter_boilerplate_3/services/device_info_service.dart'
    as _i25;
import 'package:antonx_flutter_boilerplate_3/services/file_picker_service.dart'
    as _i27;
import 'package:antonx_flutter_boilerplate_3/services/local_storage_service.dart'
    as _i12;
import 'package:antonx_flutter_boilerplate_3/services/localization_service.dart'
    as _i23;
import 'package:antonx_flutter_boilerplate_3/services/location_service.dart'
    as _i20;
import 'package:antonx_flutter_boilerplate_3/services/notification_service.dart'
    as _i26;
import 'package:device_info_plus/device_info_plus.dart' as _i7;
import 'package:dio/dio.dart' as _i3;
import 'package:flutter/material.dart' as _i9;
import 'package:geolocator/geolocator.dart' as _i21;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i22;
import 'package:logger/src/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_1 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfileResponse_2 extends _i1.SmartFake
    implements _i4.UserProfileResponse {
  _FakeUserProfileResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_3 extends _i1.SmartFake implements _i5.BaseResponse {
  _FakeBaseResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponse_4 extends _i1.SmartFake implements _i6.AuthResponse {
  _FakeAuthResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceInfoPlugin_5 extends _i1.SmartFake
    implements _i7.DeviceInfoPlugin {
  _FakeDeviceInfoPlugin_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i8.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i9.GlobalKey<_i9.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i9.GlobalKey<_i9.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i8.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<T?>? navigateWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i8.Transition? transitionClass,
    _i8.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? replaceWithTransition<T>(
    _i9.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i9.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i8.Transition? transitionClass,
    _i8.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i9.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? navigateToView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i9.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i8.Transition? transition,
    _i8.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i9.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? clearStackAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? clearTillFirstAndShowView<T>(
    _i9.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
  @override
  _i10.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i9.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i10.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i8.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i8.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<_i8.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i10.Future<_i8.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i8.SheetResponse<dynamic>?>.value(),
      ) as _i10.Future<_i8.SheetResponse<dynamic>?>);
  @override
  _i10.Future<_i8.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i10.Future<_i8.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i8.SheetResponse<T>?>.value(),
      ) as _i10.Future<_i8.SheetResponse<T>?>);
  @override
  void completeSheet(_i8.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i8.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i8.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i9.Widget Function(
      _i9.BuildContext,
      _i8.DialogRequest<dynamic>,
      dynamic Function(_i8.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<_i8.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i11.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i11.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i8.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i8.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i8.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i8.DialogResponse<dynamic>?>);
  @override
  _i10.Future<_i8.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i11.Color? barrierColor = const _i11.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i10.Future<_i8.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i10.Future<_i8.DialogResponse<T>?>.value(),
      ) as _i10.Future<_i8.DialogResponse<T>?>);
  @override
  _i10.Future<_i8.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i11.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i11.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i8.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i10.Future<_i8.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i8.DialogResponse<dynamic>?>.value(),
      ) as _i10.Future<_i8.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i8.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i12.LocalStorageService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  int get onBoardingPageCount => (super.noSuchMethod(
        Invocation.getter(#onBoardingPageCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set onBoardingPageCount(int? count) => super.noSuchMethod(
        Invocation.setter(
          #onBoardingPageCount,
          count,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get setNotificationsCount => (super.noSuchMethod(
        Invocation.getter(#setNotificationsCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set setNotificationsCount(int? count) => super.noSuchMethod(
        Invocation.setter(
          #setNotificationsCount,
          count,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set accessToken(dynamic token) => super.noSuchMethod(
        Invocation.setter(
          #accessToken,
          token,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i13.ApiService {
  @override
  _i10.Future<_i3.Dio> launchDio() => (super.noSuchMethod(
        Invocation.method(
          #launchDio,
          [],
        ),
        returnValue: _i10.Future<_i3.Dio>.value(_FakeDio_1(
          this,
          Invocation.method(
            #launchDio,
            [],
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i3.Dio>.value(_FakeDio_1(
          this,
          Invocation.method(
            #launchDio,
            [],
          ),
        )),
      ) as _i10.Future<_i3.Dio>);
  @override
  dynamic get({
    required String? endPoint,
    dynamic params,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #endPoint: endPoint,
            #params: params,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic post({
    required String? endPoint,
    dynamic data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #endPoint: endPoint,
            #data: data,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic put({
    required String? endPoint,
    dynamic data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #endPoint: endPoint,
            #data: data,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic delete({
    required String? endPoint,
    dynamic params,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #endPoint: endPoint,
            #params: params,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationService extends _i1.Mock
    implements _i14.AuthenticationService {
  @override
  bool get isLogin => (super.noSuchMethod(
        Invocation.getter(#isLogin),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set isLogin(bool? _isLogin) => super.noSuchMethod(
        Invocation.setter(
          #isLogin,
          _isLogin,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userProfile(_i15.UserProfile? _userProfile) => super.noSuchMethod(
        Invocation.setter(
          #userProfile,
          _userProfile,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set fcmToken(String? _fcmToken) => super.noSuchMethod(
        Invocation.setter(
          #fcmToken,
          _fcmToken,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic signupWithEmailAndPassword(_i16.SignUpBody? body) =>
      super.noSuchMethod(
        Invocation.method(
          #signupWithEmailAndPassword,
          [body],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic loginWithEmailAndPassword(_i17.LoginBody? body) => super.noSuchMethod(
        Invocation.method(
          #loginWithEmailAndPassword,
          [body],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i18.DatabaseService {
  @override
  _i10.Future<_i4.UserProfileResponse> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i10.Future<_i4.UserProfileResponse>.value(
            _FakeUserProfileResponse_2(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
        returnValueForMissingStub: _i10.Future<_i4.UserProfileResponse>.value(
            _FakeUserProfileResponse_2(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
      ) as _i10.Future<_i4.UserProfileResponse>);
  @override
  _i10.Future<_i5.BaseResponse> updateFcmToken(
    String? deviceId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFcmToken,
          [
            deviceId,
            token,
          ],
        ),
        returnValue: _i10.Future<_i5.BaseResponse>.value(_FakeBaseResponse_3(
          this,
          Invocation.method(
            #updateFcmToken,
            [
              deviceId,
              token,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.BaseResponse>.value(_FakeBaseResponse_3(
          this,
          Invocation.method(
            #updateFcmToken,
            [
              deviceId,
              token,
            ],
          ),
        )),
      ) as _i10.Future<_i5.BaseResponse>);
  @override
  _i10.Future<_i5.BaseResponse> clearFcmToken(String? deviceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearFcmToken,
          [deviceId],
        ),
        returnValue: _i10.Future<_i5.BaseResponse>.value(_FakeBaseResponse_3(
          this,
          Invocation.method(
            #clearFcmToken,
            [deviceId],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.BaseResponse>.value(_FakeBaseResponse_3(
          this,
          Invocation.method(
            #clearFcmToken,
            [deviceId],
          ),
        )),
      ) as _i10.Future<_i5.BaseResponse>);
  @override
  _i10.Future<_i6.AuthResponse> loginWithEmailAndPassword(
          _i17.LoginBody? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmailAndPassword,
          [body],
        ),
        returnValue: _i10.Future<_i6.AuthResponse>.value(_FakeAuthResponse_4(
          this,
          Invocation.method(
            #loginWithEmailAndPassword,
            [body],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.AuthResponse>.value(_FakeAuthResponse_4(
          this,
          Invocation.method(
            #loginWithEmailAndPassword,
            [body],
          ),
        )),
      ) as _i10.Future<_i6.AuthResponse>);
  @override
  _i10.Future<_i6.AuthResponse> createAccount(_i16.SignUpBody? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [body],
        ),
        returnValue: _i10.Future<_i6.AuthResponse>.value(_FakeAuthResponse_4(
          this,
          Invocation.method(
            #createAccount,
            [body],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.AuthResponse>.value(_FakeAuthResponse_4(
          this,
          Invocation.method(
            #createAccount,
            [body],
          ),
        )),
      ) as _i10.Future<_i6.AuthResponse>);
}

/// A class which mocks [DateTimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTimeService extends _i1.Mock implements _i19.DateTimeService {}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i20.LocationService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  set currentLocation(_i21.Position? _currentLocation) => super.noSuchMethod(
        Invocation.setter(
          #currentLocation,
          _currentLocation,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set latitude(double? _latitude) => super.noSuchMethod(
        Invocation.setter(
          #latitude,
          _latitude,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set longitude(double? _longitude) => super.noSuchMethod(
        Invocation.setter(
          #longitude,
          _longitude,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<_i21.Position?> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i10.Future<_i21.Position?>.value(),
        returnValueForMissingStub: _i10.Future<_i21.Position?>.value(),
      ) as _i10.Future<_i21.Position?>);
  @override
  _i10.Future<String> getAddressFromLatLng(_i22.LatLng? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromLatLng,
          [location],
        ),
        returnValue: _i10.Future<String>.value(''),
        returnValueForMissingStub: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<String> getUserLocalityFromLatLng(_i22.LatLng? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserLocalityFromLatLng,
          [location],
        ),
        returnValue: _i10.Future<String>.value(''),
        returnValueForMissingStub: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
}

/// A class which mocks [LocalizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationService extends _i1.Mock
    implements _i23.LocalizationService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  Map<String, Map<String, String>> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String, Map<String, String>>{},
        returnValueForMissingStub: <String, Map<String, String>>{},
      ) as Map<String, Map<String, String>>);
  @override
  dynamic getLocalizedKey(String? key) => super.noSuchMethod(
        Invocation.method(
          #getLocalizedKey,
          [key],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i24.ConfigService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  String get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [DeviceInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoService extends _i1.Mock implements _i25.DeviceInfoService {
  @override
  _i7.DeviceInfoPlugin get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue: _FakeDeviceInfoPlugin_5(
          this,
          Invocation.getter(#deviceInfo),
        ),
        returnValueForMissingStub: _FakeDeviceInfoPlugin_5(
          this,
          Invocation.getter(#deviceInfo),
        ),
      ) as _i7.DeviceInfoPlugin);
  @override
  _i10.Future<String?> getDeviceId() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceId,
          [],
        ),
        returnValue: _i10.Future<String?>.value(),
        returnValueForMissingStub: _i10.Future<String?>.value(),
      ) as _i10.Future<String?>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i26.NotificationService {
  @override
  _i2.Logger get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#log),
        ),
      ) as _i2.Logger);
  @override
  set fcmToken(String? _fcmToken) => super.noSuchMethod(
        Invocation.setter(
          #fcmToken,
          _fcmToken,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic onNotificationClick(String? payload) => super.noSuchMethod(
        Invocation.method(
          #onNotificationClick,
          [payload],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<String?> getFcmToken() => (super.noSuchMethod(
        Invocation.method(
          #getFcmToken,
          [],
        ),
        returnValue: _i10.Future<String?>.value(),
        returnValueForMissingStub: _i10.Future<String?>.value(),
      ) as _i10.Future<String?>);
}

/// A class which mocks [FilePickerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerService extends _i1.Mock
    implements _i27.FilePickerService {}
